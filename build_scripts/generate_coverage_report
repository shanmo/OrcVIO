#!/usr/bin/env python
from __future__ import absolute_import
from __future__ import print_function

import os
import subprocess
from lxml import html
import argparse

parser = argparse.ArgumentParser(description='Generate a code coverage report')
parser.add_argument('-r', '--run', nargs='+',
                   help='Commands to execute for cleaning building and testing the project', required=True)
parser.add_argument('-e', '--exclude', nargs='+',
                   help='Files in the src dir to exclude from the coverage report', required=False, default=[])

args = parser.parse_args()
commands = args.run
exclude = args.exclude

proj_root = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
build_root = os.path.join(proj_root, 'build')

print("Project root:", proj_root)

print("Deleting old data and resetting coverage counters...")
lcov_exe = 'lcov'
subprocess.check_call([lcov_exe,
                        '--directory', build_root,
                        '--zerocounters'])
coverage_dir = os.path.join(build_root, 'code_coverage')
subprocess.call("rm -rf {}".format(coverage_dir).split())
os.mkdir(coverage_dir)

print("Running specified commands...")
for c in commands:
    print("Running \"{}\"...".format(c))
    subprocess.call(c.split())


print("Generating coverage report...")

# Run lcov
outfiles = []
source_root = os.path.join(proj_root, 'src')
subproject_root = os.path.join(proj_root, 'subprojects')
genhtml_exe = 'genhtml'
htmloutdir = os.path.join(coverage_dir, 'report')
html_index = os.path.join(htmloutdir, 'index.html')
covinfo = os.path.join(coverage_dir, 'coverage.info')
initial_tracefile = covinfo + '.initial'
run_tracefile = covinfo + '.run'
raw_tracefile = covinfo + '.raw'
subprocess.check_call([lcov_exe,
                        '--directory', build_root,
                        '--capture',
                        '--initial',
                        '--output-file',
                        initial_tracefile])
subprocess.check_call([lcov_exe,
                        '--directory', build_root,
                        '--capture',
                        '--output-file', run_tracefile,
                        '--no-checksum',
                        '--rc', 'lcov_branch_coverage=1',
                        ])
# Join initial and test results.
subprocess.check_call([lcov_exe,
                        '-a', initial_tracefile,
                        '-a', run_tracefile,
                        '--rc', 'lcov_branch_coverage=1',
                        '-o', raw_tracefile])
# Remove all directories outside the source_root from the covinfo
subprocess.check_call([lcov_exe,
                        '--extract', raw_tracefile,
                        os.path.join(source_root, '*'),
                        '--rc', 'lcov_branch_coverage=1',
                        '--output-file', covinfo])

# Remove specified files
for f in exclude:
    subprocess.check_call([lcov_exe,
                            '--remove', covinfo,
                            os.path.join(source_root, f),
                            '--rc', 'lcov_branch_coverage=1',
                            '--output-file', covinfo])

# Remove all directories inside subproject dir
subprocess.check_call([lcov_exe,
                        '--remove', covinfo,
                        os.path.join(subproject_root, '*'),
                        '--rc', 'lcov_branch_coverage=1',
                        '--output-file', covinfo])
subprocess.check_call([genhtml_exe,
                        '--prefix', build_root,
                        '--prefix', source_root,
                        '--output-directory', htmloutdir,
                        '--title', 'Code coverage',
                        '--legend',
                        '--show-details',
                        '--branch-coverage',
                        covinfo])

outfiles.append(('Html', html_index))

if outfiles:
        print('')
        for (filetype, path) in outfiles:
            print(filetype + ' coverage report can be found at', path)
